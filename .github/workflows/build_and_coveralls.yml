---
name: Build & Test

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        container:
          - image: 'ros:noetic'
            env:
              PYTHON_VERSION:
              ROS_DISTRO: noetic

    container: ${{ matrix.container }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          path: src/${{ github.workspace }}

      - name: Remove broken apt repos [Ubuntu]
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      - name: Install ROS package dependencies
        run: |
          sudo apt update
          sudo apt install -y git
          sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
          sudo apt install curl
          curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
          sudo apt update
          sudo apt install ros-noetic-ros-base -y
          source /opt/ros/noetic/setup.bash
          sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential -y
          sudo apt install python3-rosdep -y
          rosdep update
      
      - name: Install catkin-tools
        run: |
          sudo apt install python3-catkin-tools python3-osrf-pycommon -y

      - name: Create workspace
        run: |
          cd src
          wstool init
          cd ..
          rosdep update
          rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO
          
      - name: Build workspace
        if: contains(matrix.container.image, 'noetic') || contains(matrix.container.image, 'noetic')
        run: |
          . /opt/ros/$ROS_DISTRO/setup.bash
            rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO
            sudo apt install ros-$ROS_DISTRO-turtlebot3 -y
            sudo apt install ros-$ROS_DISTRO-turtlebot3-bringup -y
            sudo apt install ros-$ROS_DISTRO-turtlebot3-description -y
            sudo apt install ros-$ROS_DISTRO-turtlebot3-gazebo -y
            sudo apt install ros-$ROS_DISTRO-turtlebot3-msgs -y
            sudo apt install ros-$ROS_DISTRO-turtlebot3-navigation -y
            sudo apt install ros-$ROS_DISTRO-turtlebot3-simulations -y
            sudo apt install ros-$ROS_DISTRO-turtlebot3-slam -y
            sudo apt install ros-$ROS_DISTRO-move-base -y
            sudo apt install ros-$ROS_DISTRO-move-base-msgs -y
            sudo apt install ros-$ROS_DISTRO-aruco-detect -y
            sudo apt install ros-$ROS_DISTRO-tf -y
            sudo apt install ros-$ROS_DISTRO-tf2-ros -y
            sudo apt install ros-$ROS_DISTRO-actionlib -y
            sudo apt install ros-$ROS_DISTRO-actionlib-msgs -y
            sudo apt install ros-$ROS_DISTRO-amcl -y
            sudo apt install ros-$ROS_DISTRO-map-server -y
            sudo apt install ros-$ROS_DISTRO-navigation -y
            sudo apt install ros-$ROS_DISTRO-fiducial-msgs -y

            source /opt/ros/noetic/setup.bash
            catkin build

      - name: Unit tests
        run: |
          sudo apt install -y lcov
          . /opt/ros/$ROS_DISTRO/setup.bash
          catkin config --cmake-args -DCMAKE_CXX_FLAGS="-Wall -Wno-unused --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_C_FLAGS="-Wall -Wno-unused --coverage -fno-inline -fno-inline-small-functions -fno-default-inline" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-lgcov"
          catkin build
          catkin run_tests -i && catkin_test_results


      

      # Upload coverage result to CodeCov
      - name: Upload coverage result to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{github.workspace}}/install/multi_agent_search_rescue/lib/multi_agent_search_rescue/coverage_cleaned.info
          # flags: unittests # optional
          # directory: ${{github.workspace}}/install/
          # name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)   
      
      # - name: Configure Codecov
      #   run: |
      #     lcov --directory . --capture --output-file coverage.info
      #     lcov --remove coverage.info '/opt/*' '/usr/*' '*/devel/*' '*_test*' --output-file coverage.info
      #     lcov --list coverage.info
      
      # - name: Coveralls
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-lcov: ${{ github.workspace }}/coverage.info